mse=mean((test_y-pred_y)^2)
mse = mean((test_y - pred_y)^2)
mse=mean((test_y-lm_pred)^2)
index
indexes
index=range(1:62)
indexes=range(1:62)
indexes=1:62
train = dt[indexes, ]
test = dt[-indexes, ]
train_x=data.matrix(train[,-1])
train_y=data.matrix(train[,c(1)])
test_x=data.matrix(test[,-1])
test_y=data.matrix(test[,c(1)])
xgb_train=xgb.DMatrix(data=train_x,label=train_y)
xgb_test=xgb.DMatrix(data=test_x,label=test_y)
xgbc = xgboost(data = xgb_train, max.depth = 2, nrounds = 50)
pred_y<-predict(xgbc,xgb_test)
mse = mean((test_y - pred_y)^2)
indexes = createDataPartition(dt$Hour15, p = .7, list = F)
train = dt[indexes, ]
test = dt[-indexes, ]
train_x=data.matrix(train[,-1])
train_y=data.matrix(train[,c(1)])
test_x=data.matrix(test[,-1])
test_y=data.matrix(test[,c(1)])
xgb_train=xgb.DMatrix(data=train_x,label=train_y)
xgb_test=xgb.DMatrix(data=test_x,label=test_y)
xgbc = xgboost(data = xgb_train, max.depth = 2, nrounds = 50)
pred_y<-predict(xgbc,xgb_test)
mse = mean((test_y - pred_y)^2)
set.seed(6)
indexes = createDataPartition(dt$Hour15, p = .7, list = F)
train = dt[indexes, ]
test = dt[-indexes, ]
train_x=data.matrix(train[,-1])
train_y=data.matrix(train[,c(1)])
test_x=data.matrix(test[,-1])
test_y=data.matrix(test[,c(1)])
xgb_train=xgb.DMatrix(data=train_x,label=train_y)
xgb_test=xgb.DMatrix(data=test_x,label=test_y)
xgbc = xgboost(data = xgb_train, max.depth = 2, nrounds = 50)
pred_y<-predict(xgbc,xgb_test)
mse = mean((test_y - pred_y)^2)
lm=lm(Hour15~.,data=train)
lm_pred<-predict(lm,test[,-1])
mse=mean((test_y-lm_pred)^2)
set.seed(123)
indexes = createDataPartition(dt$Hour15, p = .7, list = F)
train = dt[indexes, ]
test = dt[-indexes, ]
train_x=data.matrix(train[,-1])
train_y=data.matrix(train[,c(1)])
test_x=data.matrix(test[,-1])
test_y=data.matrix(test[,c(1)])
xgb_train=xgb.DMatrix(data=train_x,label=train_y)
xgb_test=xgb.DMatrix(data=test_x,label=test_y)
xgbc = xgboost(data = xgb_train, max.depth = 2, nrounds = 50)
pred_y<-predict(xgbc,xgb_test)
mse = mean((test_y - pred_y)^2)
lm=lm(Hour15~.,data=train)
lm_pred<-predict(lm,test[,-1])
mse=mean((test_y-lm_pred)^2)
View(indexes)
set.seed(123)
indexes = createDataPartition(dt$Hour15, p = .7, list = F)
View(indexes)
View(test)
day=1:92
testday=day[-indexes]
i=18
j=ceiling(i/2)
j=ceiling(i/7)
his=1:j
dt$Hour15[i-his]
k=k+1
j=flooring(i/7)
j=floor(i/7)
his=1:j
dt$Hour15[i-his]
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0:24)
for (i in testday)
{
k=k+1
j=floor(i/7)
his=1:j
aver_pred[k]=average(dt$Hour15[i-his])
}
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0:24)
for (i in testday)
{
k=k+1
j=floor(i/7)
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
}
mse=mean((test_y-avewr_pred)^2)
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0:24)
for (i in testday)
{
k=k+1
j=floor(i/7)
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
}
mean(dt$Hour15[i-his])
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0:24)
for (i in testday)
{
k=k+1
j=floor(i/7)
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
}
for (i in testday)
{
print(i)
}
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0:24)
for (i in testday)
{
k=k+1
j=floor(i/7)
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
aver_pred=rep(0:24)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=5)
{
j=5
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=3)
{
j=5
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=1)
{
j=5
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=3)
{
j=3
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=2)
{
j=2
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=5)
{
j=5
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=3)
{
j=3
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=10)
{
j=10
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=2)
{
j=2
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=1)
{
j=1
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=5)
{
j=5
}
his=1:j
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
his=his*7
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=5)
{
j=5
}
his=1:j
his=his*7
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=3)
{
j=3
}
his=1:j
his=his*7
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=1)
{
j=1
}
his=1:j
his=his*7
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=3)
{
j=3
}
his=1:j
his=his*7
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=2)
{
j=2
}
his=1:j
his=his*7
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
print(xgbc)
xgb.plot.importance()
xgb.plot.importance(xgbc)
xgbc
View(dt)
xgb.importance(feature_names = "inSession", model = xgbc)
train$Dimnames
xgb.importance( model = xgbc)
plot(xgb.importance(model=xgbc))
xgb.plot.importance(xgb.importance(model=xgbc))
library(stringr)
library(ggplot2)
library(gridExtra)
library(xgboost)
library(data.table)
library(forecast)
library(tseries)
library(mlr)
library(caret)
library(mltools)
```
```{r}
df<-read.csv("df.csv")
df$WDWTICKETSEASON<-factor(df$WDWTICKETSEASON)
df$DAYOFWEEK<-factor(df$DAYOFWEEK)
df$inSession=df$inSession/100
dt<-data.table(df)
dt<-one_hot(dt,cols=c("WDWTICKETSEASON","DAYOFWEEK"))
dt<-data.frame(dt)
dt<-dt[,-c(3,4,12,15)]
```
## Xgboost
```{r}
set.seed(123)
indexes = createDataPartition(dt$Hour15, p = .7, list = F)
train = dt[indexes, ]
test = dt[-indexes, ]
train_x=data.matrix(train[,-1])
train_y=data.matrix(train[,c(1)])
test_x=data.matrix(test[,-1])
test_y=data.matrix(test[,c(1)])
xgb_train=xgb.DMatrix(data=train_x,label=train_y)
xgb_test=xgb.DMatrix(data=test_x,label=test_y)
xgbc = xgboost(data = xgb_train, max.depth = 2, nrounds = 50)
pred_y<-predict(xgbc,xgb_test)
mse = mean((test_y - pred_y)^2)
mse
mean(abs(test_y - pred_y))
mean(abs(test_y - pred_y)/test_y)
lm=lm(Hour15~.,data=train)
lm_pred<-predict(lm,test[,-1])
mse=mean((test_y-lm_pred)^2)
mse
mean(abs(test_y-lm_pred))
mean(abs(test_y-lm_pred)/test_y)
day=1:92
testday=day[-indexes]
k=0
aver_pred=rep(0,24)
for (i in testday)
{
k=k+1
j=floor(i/7)
if (j>=2)
{
j=2
}
his=1:j
his=his*7
aver_pred[k]=mean(dt$Hour15[i-his])
print(k)
}
mse=mean((test_y-aver_pred)^2)
mse
mean(abs(test_y-aver_pred))
mean(abs(test_y-aver_pred)/test_y)
xgb.plot.importance(xgb.importance(model=xgbc))
